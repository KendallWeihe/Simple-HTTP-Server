#define MAXSIZE 32

int sock;                        /* socket to create */
struct sockaddr_in echoServAddr; /* Local address */

if ((sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0)
    DieWithError("socket() failed");

/* Construct local address structure */
memset(&echoServAddr, 0, sizeof(echoServAddr));   /* Zero out structure */
echoServAddr.sin_family = AF_INET;                /* Internet address family */
echoServAddr.sin_addr.s_addr = htonl(INADDR_ANY); /* Any incoming interface */
echoServAddr.sin_port = htons(port);              /* Local port */

/* Bind to the local address */
if (bind(sock, (struct sockaddr *) &echoServAddr, sizeof(echoServAddr)) < 0)
    DieWithError("bind() failed");

/* Mark the socket so it will listen for incoming connections */
if (listen(sock, MAXPENDING) < 0)
    DieWithError("listen() failed");

int clntSock;                    /* Socket descriptor for client */
struct sockaddr_in echoClntAddr; /* Client address */
unsigned int clntLen;            /* Length of client address data structure */

/* Set the size of the in-out parameter */
clntLen = sizeof(echoClntAddr);

/* Wait for a client to connect */
if ((clntSock = accept(servSock, (struct sockaddr *) &echoClntAddr,
       &clntLen)) < 0)
    DieWithError("accept() failed");

if (read_file = fopen(html_path, "r")){
   char *data = malloc(sizeof(char) * MAXSIZE);
   while (fgets(data, MAXSIZE, (FILE*)read_file) != NULL){
     send(clntSocket, data, MAXSIZE, 0);
     printf("%zu\n", data);
   }
}
